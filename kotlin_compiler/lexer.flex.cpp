#line 1 "lexer.flex.cpp"

#line 3 "lexer.flex.cpp"

#define  YY_INT_ALIGNED short int
#define _CRT_SECURE_NO_WARNINGS

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 160
#define YY_END_OF_BUFFER 161
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[454] =
    {   0,
        0,    0,    6,    6,    0,    0,   10,   10,    0,    0,
        0,    0,  161,  160,  159,  124,   14,  113,  160,   15,
      148,  149,  111,  109,  138,  110,  139,  112,  157,  157,
      136,  137,  132,  114,  131,  135,  151,  158,  133,  134,
      145,    1,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  146,
      160,  147,    6,    7,    6,    2,    3,    4,   10,   11,
       18,   24,   16,  160,   17,  159,  142,  126,    0,    0,
      119,  122,  117,  120,  115,  121,  116,  150,  143,  156,
        9,   13,  118,    0,  157,    0,  155,  154,    0,    0,

        0,  141,  129,  125,  130,  144,  140,  158,  158,  158,
      158,   31,  158,   62,  158,  158,  158,  158,  158,  158,
       36,  158,  158,  158,  158,  158,  158,  158,  158,  158,
       41,  158,   42,   45,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  123,    6,    7,    0,    7,    2,
        3,   10,   11,   11,   12,   18,   30,   23,   28,   29,
       26,   27,   22,   20,   25,   21,   30,  128,   43,   46,
        5,    0,   13,    0,  156,  153,  152,  127,  158,  158,
      158,   32,  158,  158,  158,  158,  158,  158,  158,  158,

      158,  158,  158,  158,  158,  158,  158,  158,  158,   39,
       40,   70,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,   99,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,   76,  158,  158,  158,  158,  158,
      158,   55,  158,   58,   59,  158,  158,    8,    7,   19,
        0,  158,  158,  158,  158,  158,  158,  158,  158,  158,
      158,   86,  158,  158,   37,   87,  158,  158,  158,  158,
       68,  158,  158,  158,   72,  158,  158,  158,  158,  158,
       47,  158,   97,  158,  158,  158,  158,  158,  158,  158,
      158,  158,  158,  158,  158,  158,  158,  158,  158,   52,

      158,   54,  158,  158,  158,   60,  158,  158,   19,  158,
      158,  158,   33,   63,   34,  158,   84,  158,  158,  158,
      158,  158,  158,   38,   67,   90,  158,   91,  158,   93,
      158,  158,  158,  158,  158,  158,  158,   73,  158,  158,
      158,  158,  158,  158,  158,  158,  158,   51,  158,  158,
       53,  158,  158,   78,  158,   79,   61,   19,  158,   81,
      158,  158,  158,  158,  158,  158,  158,   88,  158,  158,
       71,   92,  158,  158,  158,  158,   48,  158,  158,  158,
      158,  158,  158,  103,  158,  158,   50,  105,  158,  158,
      158,  158,   57,  108,   19,  158,  158,  158,  158,  158,

      158,  158,   66,  158,   69,  158,  158,  158,  158,  158,
      158,   49,  101,  158,  158,  158,  104,  158,  106,  107,
      158,   80,  158,  158,  158,   35,  158,   65,   89,  158,
       94,   95,   96,   98,  100,   74,  158,   75,   77,  158,
      158,   83,  158,  158,   44,  102,   56,   82,  158,  158,
       64,   85,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    1,    1,    5,    6,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   20,   21,
       22,   23,   24,   25,   26,   26,   26,   26,   27,   28,
       29,   29,   29,   29,   29,   30,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       31,   32,   33,    1,   34,   35,   36,   37,   38,   39,

       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
       50,   51,   29,   52,   53,   54,   55,   56,   57,   58,
       59,   29,   60,   61,   62,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[63] =
    {   0,
        1,    2,    1,    3,    1,    1,    4,    1,    1,    5,
        1,    1,    1,    6,    6,    7,    7,    7,    6,    1,
        6,    1,    6,    1,    1,    7,    7,    7,    8,    8,
        6,    4,    6,    8,    6,    7,    7,    7,    7,    7,
        7,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    1,
        1,    1
    } ;

static const flex_int16_t yy_base[471] =
    {   0,
        0,    0,   59,   60,   51,   54,  618,  617,   74,   86,
       92,   93,  626,  629,   69,   76,  621,  602,  617,  629,
      629,  629,  600,   90,  629,   91,   91,  101,  112,   73,
      602,  629,  598,  597,  596,  113,  629,    0,  629,  629,
        0,  629,   98,   82,  107,  108,  113,  119,  577,  124,
      580,   83,  124,  130,  575,  143,  145,  578,  570,  629,
      551,  629,    0,  146,  607,    0,  172,  629,    0,  174,
        0,  629,  629,  204,  629,  115,  629,  588,   66,  605,
      629,  629,  629,  629,  629,  629,  629,  629,  629,  197,
      629,    0,  629,  183,  205,  231,  629,  629,  200,   86,

        0,  629,  629,  586,  629,  629,  629,    0,  554,  552,
      556,  580,  563,    0,  548,  565,  161,  550,  545,  551,
        0,  548,  543,  540,   29,  547,  203,  541,  543,  537,
        0,  539,  213,    0,  535,  544,  540,  541,  545,  530,
      543,  138,  185,  545,  217,  158,  154,  175,  537,  220,
      210,  529,  216,  226,  629,    0,  575,  574,  160,    0,
      259,    0,  266,  269,  629,    0,  629,  629,  629,  629,
      629,  629,  629,  629,  629,  629,    0,  629,  629,  629,
      629,  269,    0,  277,  280,  272,    0,  629,  523,  521,
      525,  629,  538,  535,  519,  520,  246,  517,  533,  528,

      531,  526,  517,  524,  523,  509,  514,  520,  523,    0,
        0,    0,  508,  513,  502,  511,  514,  513,  512,  502,
      503,  509,  178,    0,  496,  501,  510,  489,  250,  497,
      503,  501,  486,  493,  488,  498,  486,  489,  482,  484,
      493,    0,  492,  476,  494,  253,  482,  629,  629,    0,
      290,  476,  491,  472,  479,  481,  470,  486,  467,  476,
      466,    0,  476,  469,    0,    0,  478,  463,  474,  474,
        0,  465,  459,  452,    0,  460,  456,  455,  462,  458,
        0,  466,    0,  467,  450,  465,  452,  463,  458,  457,
      452,  451,  450,  441,  452,  455,  438,  449,  436,    0,

      430,    0,  241,  446,  433,    0,  444,  443,    0,  446,
      434,  444,    0,    0,    0,  430,  426,  428,  432,  439,
      430,  419,  423,    0,    0,  424,  416,    0,  429,    0,
      234,  419,  423,  412,  411,  420,  421,    0,  408,  409,
      422,  421,  402,  417,  407,  416,  402,    0,  404,  412,
        0,  404,  409,    0,  407,    0,    0,    0,  410,    0,
      393,  402,  390,  389,  394,  388,  403,    0,  404,  380,
        0,    0,  402,  401,  392,  386,    0,  384,  394,  392,
      391,  376,  375,    0,  388,  388,    0,    0,  390,  386,
      386,  379,    0,    0,  629,  368,  377,  370,  381,  378,

      370,  376,    0,  368,    0,  370,  347,  339,  352,  332,
      339,    0,    0,  313,  321,  271,    0,  274,    0,    0,
      285,    0,  270,  270,  264,    0,  273,    0,    0,  276,
        0,    0,    0,    0,    0,    0,  276,    0,    0,  260,
      263,    0,  261,  261,    0,    0,    0,    0,  257,  211,
        0,    0,  629,  324,  332,  340,  348,  350,  358,  366,
      374,  382,  390,  398,  406,  233,  195,  130,  114,   60
    } ;

static const flex_int16_t yy_def[471] =
    {   0,
      453,    1,  454,  454,  455,  455,  456,  456,  457,  457,
      457,  457,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,   29,
      453,  453,  453,  453,  453,  453,  453,  458,  453,  453,
      458,  453,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  453,
      453,  453,  459,  453,  459,  460,  453,  453,  461,  462,
      463,  453,  453,  464,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  465,  453,  453,  453,  453,  453,  453,  453,  453,

      466,  453,  453,  453,  453,  453,  453,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  453,  459,  453,  453,  453,  460,
      453,  461,  462,  462,  453,  463,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  467,  453,  453,  453,
      453,  453,  465,  453,  453,  453,  466,  453,  458,  458,
      458,  453,  458,  458,  458,  458,  458,  458,  458,  458,

      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  453,  453,  468,
      453,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,

      458,  458,  458,  458,  458,  458,  458,  458,  469,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  470,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  453,  458,  458,  458,  458,  458,

      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,  458,  458,  458,  458,  458,  458,  458,  458,
      458,  458,    0,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453
    } ;

static const flex_int16_t yy_nxt[692] =
    {   0,
       14,   15,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   38,   38,   38,   38,
       39,   14,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   38,   50,   38,   38,   51,   38,   52,   53,
       54,   55,   56,   57,   38,   58,   59,   38,   38,   60,
       61,   62,   64,   64,   67,   67,  395,   67,   67,   67,
       76,   67,   67,   67,   67,   72,   67,   73,   77,  204,
       14,   67,  205,   67,   67,   68,   67,   72,   68,   73,
       65,   65,   14,   14,   14,   14,   14,   78,   75,   75,

       84,  186,  186,   86,   89,   74,   90,   90,   90,  453,
       91,   85,   87,   88,  179,   92,   76,   74,  180,   79,
      358,   76,   93,   74,   74,   94,  106,   95,   95,   95,
      453,  107,  136,  113,  109,  110,  309,  137,   96,   97,
      114,   98,  115,  119,   76,   99,  111,  120,  100,  157,
      112,   96,   97,  116,  126,   76,  117,  121,  118,  123,
      138,  124,  127,  249,  131,  142,  122,   76,  128,  101,
      125,  132,  133,  129,  139,  226,  134,  158,  140,  141,
      149,  143,  146,  164,  144,  161,  161,  150,  165,  227,
      161,  158,  161,  234,  161,  147,  151,  148,   90,   90,

       90,  250,  161,  152,  161,  168,  147,  169,  196,  197,
      170,  235,   90,   90,   90,   95,   95,   95,   94,  171,
       95,   95,   95,   96,   97,  236,  283,  237,  228,  284,
      182,   96,   97,   99,  229,  172,   96,   97,   99,  187,
      173,  184,  207,  184,   96,   97,  185,  185,  185,  208,
      452,  209,  174,  214,  231,  175,  215,  176,  177,  216,
      232,  217,  244,  239,  241,  246,  218,  245,  242,  247,
      233,  240,  161,  161,  373,  453,  352,  161,  164,  161,
      453,  161,  374,  165,   90,   90,   90,  186,  186,  161,
      353,  161,  185,  185,  185,  185,  185,  185,  259,  260,

      289,  306,  182,  290,  307,  185,  185,  185,  451,  450,
      449,  448,  447,  251,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  251,   63,   63,   63,   63,   63,   63,
       63,   63,   66,   66,   66,   66,   66,   66,   66,   66,
       69,   69,   69,   69,   69,   69,   69,   69,   71,   71,
       71,   71,   71,   71,   71,   71,  108,  108,  156,  156,
      437,  156,  156,  156,  156,  156,  160,  160,  160,  160,
      160,  436,  160,  160,  162,  162,  162,  162,  435,  162,
      162,  162,  163,  434,  163,  163,  163,  163,  163,  163,
      166,  433,  432,  431,  166,  166,  166,  166,  167,  167,

      167,  167,  167,  167,  167,  167,  183,  430,  183,  183,
      183,  183,  183,  183,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  397,  396,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  357,  356,  355,  354,  351,  350,  349,  348,
      347,  346,  345,  344,  343,  342,  341,  340,  339,  338,

      337,  336,  335,  334,  333,  332,  331,  330,  329,  328,
      327,  326,  325,  324,  323,  322,  321,  320,  319,  318,
      317,  316,  315,  314,  313,  312,  311,  310,  308,  305,
      304,  303,  302,  301,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  288,  287,  286,  285,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      258,  257,  256,  255,  254,  253,  252,  249,  248,  243,
      238,  230,  225,  224,  223,  222,  221,  220,  219,  213,
      212,  211,  210,  206,  203,  202,  201,  200,  199,  198,

      195,  194,  193,  192,  191,  190,  189,  188,  181,  178,
      159,  155,  154,  153,  145,  135,  130,  105,  104,  103,
      102,   83,   82,   81,   80,  453,   70,   70,   13,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453

    } ;

static const flex_int16_t yy_chk[692] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    5,    5,  470,    6,    6,    5,
       15,    5,    6,    5,    6,    9,    6,    9,   16,  125,
        9,    5,  125,    5,    6,    5,    6,   10,    6,   10,
        3,    4,   10,   11,   12,   11,   12,   16,   11,   12,

       24,  100,  100,   26,   27,    9,   27,   27,   27,   30,
       28,   24,   26,   26,   79,   28,   76,   10,   79,   16,
      469,   15,   28,   11,   12,   29,   36,   29,   29,   29,
       30,   36,   52,   44,   43,   43,  468,   52,   29,   29,
       44,   29,   45,   46,   56,   29,   43,   46,   29,   64,
       43,   29,   29,   45,   48,  147,   45,   46,   45,   47,
       53,   47,   48,  159,   50,   54,   46,   76,   48,   29,
       47,   50,   50,   48,   53,  142,   50,   64,   53,   53,
       57,   54,   56,   70,   54,   67,   67,   57,   70,  142,
       67,  159,   67,  146,   67,   56,   57,   56,   94,   94,

       94,  467,   67,   57,   67,   74,  147,   74,  117,  117,
       74,  146,   90,   90,   90,   99,   99,   99,   95,   74,
       95,   95,   95,   90,   90,  148,  223,  148,  143,  223,
       90,   95,   95,   99,  143,   74,   90,   90,   95,  466,
       74,   96,  127,   96,   95,   95,   96,   96,   96,  127,
      450,  127,   74,  133,  145,   74,  133,   74,   74,  133,
      145,  133,  153,  150,  151,  154,  133,  153,  151,  154,
      145,  150,  161,  161,  331,  163,  303,  161,  164,  161,
      163,  161,  331,  164,  182,  182,  182,  186,  186,  161,
      303,  161,  184,  184,  184,  185,  185,  185,  197,  197,

      229,  246,  182,  229,  246,  251,  251,  251,  449,  444,
      443,  441,  440,  185,  437,  430,  427,  425,  424,  423,
      421,  418,  416,  251,  454,  454,  454,  454,  454,  454,
      454,  454,  455,  455,  455,  455,  455,  455,  455,  455,
      456,  456,  456,  456,  456,  456,  456,  456,  457,  457,
      457,  457,  457,  457,  457,  457,  458,  458,  459,  459,
      415,  459,  459,  459,  459,  459,  460,  460,  460,  460,
      460,  414,  460,  460,  461,  461,  461,  461,  411,  461,
      461,  461,  462,  410,  462,  462,  462,  462,  462,  462,
      463,  409,  408,  407,  463,  463,  463,  463,  464,  464,

      464,  464,  464,  464,  464,  464,  465,  406,  465,  465,
      465,  465,  465,  465,  404,  402,  401,  400,  399,  398,
      397,  396,  392,  391,  390,  389,  386,  385,  383,  382,
      381,  380,  379,  378,  376,  375,  374,  373,  370,  369,
      367,  366,  365,  364,  363,  362,  361,  359,  355,  353,
      352,  350,  349,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  337,  336,  335,  334,  333,  332,  329,  327,
      326,  323,  322,  321,  320,  319,  318,  317,  316,  312,
      311,  310,  308,  307,  305,  304,  301,  299,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  289,  288,  287,

      286,  285,  284,  282,  280,  279,  278,  277,  276,  274,
      273,  272,  270,  269,  268,  267,  264,  263,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  247,  245,
      244,  243,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  228,  227,  226,  225,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  209,  208,
      207,  206,  205,  204,  203,  202,  201,  200,  199,  198,
      196,  195,  194,  193,  191,  190,  189,  158,  157,  152,
      149,  144,  141,  140,  139,  138,  137,  136,  135,  132,
      130,  129,  128,  126,  124,  123,  122,  120,  119,  118,

      116,  115,  113,  112,  111,  110,  109,  104,   80,   78,
       65,   61,   59,   58,   55,   51,   49,   35,   34,   33,
       31,   23,   19,   18,   17,   13,    8,    7,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      453

    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[161] =
    {   0,
0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 
    0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.l"
#line 6 "lexer.l"

#define _CRT_SECURE_NO_WARNINGS
//#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <string.h>

void printMLComment(const char* comment);
void printONComment(const char* comment);
void printKeyword(const char* keyword);
void printLogicOperator(const char* o);
void printComparisonOperator(const char* o);
void printArithmeticOperator(const char* o);
void printInteger(int i);
void printHex(int i);
void printBin(int i);
void printLong(long int i);
void printFloat(float f);
void printDouble(double d);
void printChar(const char c);
void printString(const char* str);
void printRawString(const char* str);
void printIdentifier(const char* id);
void printBackticksIdentifier(const char* id);
void printErr(const char* errMsg, int lineNum);
void removeChar(char * str, char charToRemmove);

#line 810 "lexer.flex.cpp"
/* Note: There's no octal integer literals in Kotlin */

#line 813 "lexer.flex.cpp"

#define INITIAL 0
#define RAW_STRING 1
#define BACKTICKS_IDENTIFIER 2
#define MULTILINE_COMMENT 3
#define STRING 4
#define CHAR 5

/*windows compatibility case*/
#include <io.h>
#define isatty _isatty
#define fileno _fileno
    
#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 50 "lexer.l"




#line 55 "lexer.l"
int currentInteger;
long int currentLong;
double currentDouble;
float currentFloat;
char currentString[1000];
char buffer[100];



#line 1047 "lexer.flex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 454 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 453 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 64 "lexer.l"
{
                                            currentString[0] = '\0';
                                            BEGIN(BACKTICKS_IDENTIFIER);
                                        }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 69 "lexer.l"
{
                                            strcat(currentString, yytext);
                                        }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 73 "lexer.l"
{
                                            printErr("Error! Name contains illegal characters", yylineno);
                                        }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 77 "lexer.l"
{
                                            printBackticksIdentifier(currentString);
                                            BEGIN(INITIAL);
                                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 83 "lexer.l"
{
                                            currentString[0] = '\0';
                                            BEGIN(RAW_STRING);
                                        }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 88 "lexer.l"
{
                                            strcat(currentString, yytext);
                                        }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 92 "lexer.l"
{
                                            strcat(currentString, yytext);
                                        }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 96 "lexer.l"
{
                                            printRawString(currentString);
                                            BEGIN(INITIAL);
                                        }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 101 "lexer.l"
{
                                            currentString[0] = '\0';
                                            BEGIN(MULTILINE_COMMENT);
                                        }
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 106 "lexer.l"
{
                                            strcat(currentString, yytext);
                                        }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 110 "lexer.l"
{
                                            strcat(currentString, yytext);
                                        }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 114 "lexer.l"
{
                                            printMLComment(currentString);
                                            BEGIN(INITIAL);
                                        }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 119 "lexer.l"
{
                                            printONComment(yytext);
                                        }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 123 "lexer.l"
{
                                            currentString[0] = '\0';
                                            BEGIN(STRING);
                                        }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 128 "lexer.l"
{
                                            currentString[0] = '\0';
                                            BEGIN(CHAR);
                                        }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 133 "lexer.l"
{
                                            printString(currentString);
                                            BEGIN(INITIAL);
                                        }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 138 "lexer.l"
{
                                            if (currentString[1] != '\0')
                                            {
                                                printErr("Error! More than one character in a char literal", yylineno);
                                            }
                                            else
                                            {
                                                printChar(currentString[0]);
                                            }
                                            BEGIN(INITIAL);
                                        }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 150 "lexer.l"
{
                                            strcat(currentString, yytext);
                                        }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 154 "lexer.l"
{
                                            sscanf(yytext, "%c", &buffer);
                                            strcat(currentString, buffer);
                                        }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 159 "lexer.l"
{
                                            strcat(currentString, "\n");
                                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 163 "lexer.l"
{
                                            strcat(currentString, "\t");
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 168 "lexer.l"
{
                                            strcat(currentString, "\b");
                                        }
	YY_BREAK
case 23:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 172 "lexer.l"
{
                                            strcat(currentString, "\$");
                                        }
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 176 "lexer.l"
{
                                            printErr("Error! Expected end of string/char but found end of line!", yylineno);
                                            BEGIN(INITIAL);
                                        }
	YY_BREAK
case YY_STATE_EOF(STRING):
case YY_STATE_EOF(CHAR):
case YY_STATE_EOF(MULTILINE_COMMENT):
#line 181 "lexer.l"
{
                                            printErr("Error! expected end of string but found end of file!", yylineno);
                                            BEGIN(INITIAL);
                                        }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 186 "lexer.l"
{
                                            strcat(currentString, "\r");
                                        }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 190 "lexer.l"
{
                                            strcat(currentString, "\0");
                                        }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 194 "lexer.l"
{
                                            strcat(currentString, "\\");
                                        }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 198 "lexer.l"
{
                                            strcat(currentString, "\"");
                                        }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 202 "lexer.l"
{
                                            strcat(currentString, "\'");
                                        }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 206 "lexer.l"
{
                                             printErr("Error! Illegal escape ", yylineno);
                                             printf("Illegal escape: %s\n", yytext);
                                        }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 212 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 213 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 214 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 215 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 216 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 217 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 218 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 219 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 220 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 221 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 222 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 223 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 224 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 225 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 226 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 227 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 228 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 229 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 230 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 231 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 232 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 233 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 234 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 235 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 236 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 237 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 238 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 239 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 240 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 241 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 242 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 244 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 245 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 246 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 247 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 248 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 249 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 250 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 251 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 252 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 253 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 254 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 255 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 256 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 257 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 258 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 259 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 260 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 261 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 263 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 264 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 265 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 266 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 267 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 268 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 269 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 270 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 271 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 272 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 273 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 274 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 275 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 276 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 277 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 278 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 279 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 280 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 281 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 282 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 283 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 284 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 285 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 286 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 287 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 288 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 289 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 290 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 291 "lexer.l"
{ printKeyword(yytext); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 293 "lexer.l"
{ printArithmeticOperator(yytext); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 294 "lexer.l"
{ printArithmeticOperator(yytext); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 295 "lexer.l"
{ printArithmeticOperator(yytext); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 296 "lexer.l"
{ printArithmeticOperator(yytext); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 297 "lexer.l"
{ printArithmeticOperator(yytext); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 299 "lexer.l"
{ printf("Found assign operator: %s\n", yytext); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 301 "lexer.l"
{ printArithmeticOperator(yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 302 "lexer.l"
{ printArithmeticOperator(yytext); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 303 "lexer.l"
{ printArithmeticOperator(yytext); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 304 "lexer.l"
{ printArithmeticOperator(yytext); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 305 "lexer.l"
{ printArithmeticOperator(yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 307 "lexer.l"
{ printArithmeticOperator(yytext); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 308 "lexer.l"
{ printArithmeticOperator(yytext); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 310 "lexer.l"
{ printLogicOperator(yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 311 "lexer.l"
{ printLogicOperator(yytext); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 312 "lexer.l"
{ printLogicOperator(yytext); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 314 "lexer.l"
{ printComparisonOperator(yytext); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 315 "lexer.l"
{ printComparisonOperator(yytext); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 316 "lexer.l"
{ printComparisonOperator(yytext); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 317 "lexer.l"
{ printComparisonOperator(yytext); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 318 "lexer.l"
{ printComparisonOperator(yytext); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 319 "lexer.l"
{ printComparisonOperator(yytext); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 320 "lexer.l"
{ printf("Found right angle bracket: %s\n", yytext); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 321 "lexer.l"
{ printf("Found left angle bracket: %s\n", yytext); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 323 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 324 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 326 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 327 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 328 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 329 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 330 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 332 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 333 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 334 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 335 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 336 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 338 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 340 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 341 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 343 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 344 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 346 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 347 "lexer.l"
{ printf("Found token: %s\n", yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 349 "lexer.l"
{
                                            buffer[0] = '\0';
                                            strcat(buffer, yytext);
                                            char *p;
                                            currentLong = strtol(buffer, &p, 16);
                                            printHex(currentLong);
                                        }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 357 "lexer.l"
{
                                            buffer[0] = '\0';
                                            strcat(buffer, yytext);
                                            char dest[1000];
                                            strcpy(dest, buffer+2);
                                            char *p;
                                            currentLong = strtol(dest, &p, 2);
                                            printBin(currentLong);
                                        }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 367 "lexer.l"
{
                                            buffer[0] = '\0';
                                            strcat(buffer, yytext);
                                            removeChar(buffer, '_');
                                            char *p;
                                            currentLong = strtol(buffer, &p, 10);;
                                            printLong(currentLong);
                                        }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 376 "lexer.l"
{
                                            buffer[0] = '\0';
                                            strcat(buffer, yytext);
                                            removeChar(buffer, '_');
                                            currentFloat = atof(buffer);
                                            printFloat(currentFloat);
                                        }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 384 "lexer.l"
{
                                            buffer[0] = '\0';
                                            strcat(buffer, yytext);
                                            removeChar(buffer, '_');
                                            currentFloat = atof(buffer);
                                            printDouble(currentFloat);
                                        }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 392 "lexer.l"
{
                                            buffer[0] = '\0';
                                            strcat(buffer, yytext);
                                            removeChar(buffer, '_');
                                            currentInteger = atoi(buffer);
                                            printInteger(currentInteger);
                                        }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 400 "lexer.l"
{
                                            printIdentifier(yytext);
                                        }
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 405 "lexer.l"
{ /* no action */ }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 407 "lexer.l"
ECHO;
	YY_BREAK
#line 2048 "lexer.flex.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(RAW_STRING):
case YY_STATE_EOF(BACKTICKS_IDENTIFIER):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 454 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 454 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 453);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 407 "lexer.l"


void removeChar(char * str, char charToRemmove){
    int i, j;
    int len = strlen(str);
    for(i=0; i<len; i++)
    {
        if(str[i] == charToRemmove)
        {
            for(j=i; j<len; j++)
            {
                str[j] = str[j+1];
            }
            len--;
            i--;
        }
    }
    
}

void printMLComment(const char* comment)
{
    printf("Found multiline comment: \n\"%s\"\n\n", comment);
}

void printONComment(const char* comment)
{
    printf("Found one line comment: \n\"%s\"\n\n", comment);
}

void printKeyword(const char* keyword)
{
    printf("Found keyword: %s\n", keyword);
}

void printLogicOperator(const char* o)
{
    printf("Found logic operator: %s\n", o);
}

void printComparisonOperator(const char* o)
{
    printf("Found comparison operator: %s\n", o);
}

void printArithmeticOperator(const char* o)
{
    printf("Found arithmetic operator: %s\n", o);
}

void printInteger(int i)
{
    printf("Found integer: %d\n", i);
}

void printHex(int i)
{
    printf("Found hex: %d\n", i);
}

void printBin(int i)
{
    printf("Found bin: %d\n", i);
}

void printLong(long int i)
{
    printf("Found long integer: %ld\n", i);
}

void printFloat(float f)
{
    printf("Found float: %f\n", f);
}

void printDouble(double d)
{
    printf("Found double: %lf\n", d);
}

void printChar(const char c)
{
    printf("Found char: %c\n", c);
}

void printString(const char* str)
{
    printf("Found string: \n%s\n\n", str);
}

void printRawString(const char* str)
{
    printf("Found RAW string: \n\"\"\"%s\"\"\"\n\n", str);
}

void printIdentifier(const char* id)
{
    printf("Found identifier: %s\n", id);
}

void printBackticksIdentifier(const char* id)
{
    printf("Found identifier in backticks: %s\n", id);
}

void printErr(const char* errMsg, int lineNum)
{
    if (lineNum >= 0)
    {
        printf("Error in line %d\n", lineNum);
    }

    printf("Error message: %s\n", errMsg);
}

int main(int argc, char* argv[])
{
    //yyin = fopen(argv[1], "r");
    yyin = fopen("text.txt", "r");
    yylex();
    return 0;
}
